
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
//线程id 线程函数得到线程id
pthread_t pthread_self();
/*
线程创建函数:
      int pthread_create(pthread_t *thread,const pthread_attr_t *attr,
                        void *(*start_routinue)(void *) ,void*arg);
      thread: 传出参数，是无符号长整形数，线程创建成功，会将线程 ID 写入到这个指针指向的内存中
      attr: 线程的属性，一般情况下使用默认属性即可，写 NULL
      start_routine: 函数指针，创建出的子线程的处理动作，也就是该函数在子线程中执行。
      arg: 作为实参传递到 start_routine 指针指向的函数内部

      返回值：线程创建成功返回 0，创建失败返回对应的错误号
      注意：
            # pthread_create 函数的定义在某一个库中, 编译的时候需要加库名 pthread
            $ gcc pthread_create.c -lpthread
线程退出函数
      void pthread_exit(void *retval)
      参数：线程退出的时候携带的数据，当前子线程的主线程会得到该数据。如果不需要使用，指定为 NULL
线程回收函数
      #include <pthread.h>
      // 这是一个阻塞函数, 子线程在运行这个函数就阻塞
      // 子线程退出, 函数解除阻塞, 回收对应的子线程资源, 类似于回收进程使用的函数 wait()
      int pthread_join(pthread_t thread,void **retval)
      参数:
            thread: 要被回收的子线程的线程 ID
            retval: 二级指针，指向一级指针的地址，是一个传出参数，
               这个地址中存储了 pthread_exit () 传递出的数据，如果不需要这个参数，可以指定为 NULL
            返回值：线程回收成功返回 0，回收失败返回错误号。
线程分离函数:
      int pthread_detach(pthread_t thread);
            在某些情况下，程序中的主线程有属于自己的业务处理流程，
            如果让主线程负责子线程的资源回收，调用 pthread_join() 
            只要子线程不退出主线程就会一直被阻塞，主要线程的任务也就不能被执行了。
            在线程库函数中为我们提供了线程分离函数 pthread_detach()，
            调用这个函数之后指定的子线程就可以和主线程分离，当子线程退出的时候，
            其占用的内核资源就被系统的其他进程接管并回收了。
            线程分离之后在主线程中使用 pthread_join() 就回收不到子线程资源了。


线程取消函数
      // 参数是子线程的线程ID
      int pthread_cancel(pthread_t thread);
      线程取消的意思就是在某些特定情况下在一个线程中杀死另一个线程。使用这个函数杀死一个线程需要分两步：
            在线程 A 中调用线程取消函数 pthread_cancel，指定杀死线程 B，这时候线程 B 是死不了的
            在线程 B 中进程一次系统调用（从用户区切换到内核区），否则线程 B 可以一直运行。
            这其实和七步断肠散、含笑半步癫的功效是一样的，吃了毒药不动或者不笑也没啥事儿
            参数：要杀死的线程的线程 ID
            返回值：函数调用成功返回 0，调用失败返回非 0 错误号。 
线程ID比较函数
      在 Linux 中线程 ID 本质就是一个无符号长整形，
      因此可以直接使用比较操作符比较两个线程的 ID，
      但是线程库是可以跨平台使用的，在某些平台上 pthread_t 可能不是一个单纯的整形，
      这中情况下比较两个线程的 ID 必须要使用比较函数，函数原型如下
      
      int pthread_equal(pthread_t t1, pthread_t t2);
      参数：t1 和 t2 是要比较的线程的线程 ID
      返回值：如果两个线程 ID 相等返回非 0 值，如果不相等返回 0
互斥锁函数：
      在 Linux 中互斥锁的类型为 pthread_mutex_t，创建一个这种类型的变量就得到了一把互斥锁：
            pthread_mutex_t  mutex;
      // 初始化互斥锁
      // restrict: 是一个关键字, 用来修饰指针, 只有这个关键字修饰的指针可以访问指向的内存地址, 其他指针是不行的
      int pthread_mutex_init(pthread_mutex_t *restrict mutex,
            const pthread_mutexattr_t *restrict attr);
      // 释放互斥锁资源            
      int pthread_mutex_destroy(pthread_mutex_t *mutex);
      参数:
      mutex: 互斥锁变量的地址
      attr: 互斥锁的属性，一般使用默认属性即可，这个参数指定为 NULL
      // 修改互斥锁的状态, 将其设定为锁定状态, 这个状态被写入到参数 mutex 中
      int pthread_mutex_lock(pthread_mutex_t *mutex);
      这个函数被调用，首先会判断参数 mutex 互斥锁中的状态是不是锁定状态:

      没有被锁定，是打开的，这个线程可以加锁成功，这个这个锁中会记录是哪个线程加锁成功了
      如果被锁定了，其他线程加锁就失败了，这些线程都会阻塞在这把锁上
      当这把锁被解开之后，这些阻塞在锁上的线程就解除阻塞了，并且这些线程是通过竞争的方式对这把锁加锁，没抢到锁的线程继续阻塞
      
      // 尝试加锁
      int pthread_mutex_trylock(pthread_mutex_t *mutex);
      调用这个函数对互斥锁变量加锁还是有两种情况:

      如果这把锁没有被锁定是打开的，线程加锁成功
      如果锁变量被锁住了，调用这个函数加锁的线程，不会被阻塞，加锁失败直接返回错误号
      C
      1
      2
      // 对互斥锁解锁
      int pthread_mutex_unlock(pthread_mutex_t *mutex);






*/

//子线程处理代码

void* callback(void* arg)
{

      for(int i = 0;i < 5;i++)
      {

         printf("子线程: i = %d\n",i);


      }
      printf("子线程:%ld\n",pthread_self());
      return NULL;

}

int main()
{
   
   
   pthread_t tid;
   pthread_create(&tid,NULL,callback,NULL);
   for(int i = 0;i < 5;i++)
   {

         printf("主线程: i = %d\n",i);


   }
   printf("主线程:%ld\n",pthread_self());
   pthread_exit(NULL);
   //
   sleep(3);
   return 0;


}
